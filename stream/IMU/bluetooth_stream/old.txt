#include <Arduino.h>
#include <QMI8658.h>
#include <Wire.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// Define BLE service and characteristic UUIDs
#define SERVICE_UUID "12345678-1234-1234-1234-123456789012"
#define SENSOR_CHARACTERISTIC_UUID "12345678-1234-1234-1234-123456789013"

// Sampling parameters
#define SAMPLE_INTERVAL 2   // Sampling interval in milliseconds
#define SAMPLES_PER_PACKAGE 30 // Number of samples to send in one package

short acc[3], gyro[3];
short sensorData[SAMPLES_PER_PACKAGE][8]; // Array to hold the last SAMPLES_PER_PACKAGE samples (8 shorts per sample)
unsigned int timestamp;
int sampleCount = 0;     // Counter for the number of samples collected
static unsigned long lastSampleTime = 0;
BLECharacteristic *pSensorCharacteristic;
bool deviceConnected = false;


// Callback for BLE server connections
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    Serial.println("Connected to device");
    deviceConnected = true;
  }

  void onDisconnect(BLEServer* pServer) {
    Serial.println("Disconnected from device");
    deviceConnected = false;
    pServer->startAdvertising();  // Restart advertising
  }
};

void setup() {
    Serial.begin(115200);

    // Initialize QMI8658 IMU
    Wire.begin(6, 7);
    QMI8658_init();
    Serial.println("QMI8658 initialized");

    // Initialize BLE
    BLEDevice::init("ESP32S3_IMU_Sender");
    BLEServer *pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());


    // Print the MAC address of the Arduino device (BLE server)
    Serial.print("BLE Server MAC Address: ");
    Serial.println(BLEDevice::getAddress().toString().c_str());

    // Create BLE service
    BLEService *pService = pServer->createService(SERVICE_UUID);

    // Create a characteristic for combined accelerometer and gyroscope data
    pSensorCharacteristic = pService->createCharacteristic(
        SENSOR_CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_NOTIFY
    );
    pSensorCharacteristic->addDescriptor(new BLE2902());

    // Start the service
    pService->start();

    // Start advertising
    pServer->getAdvertising()->start();
    Serial.println("Waiting for a client connection...");

    // Initial delay for stability
    delay(2000);
}

void loop() {
  
    unsigned long currentMillis = millis();


    if (currentMillis - lastSampleTime >= SAMPLE_INTERVAL) {
        lastSampleTime = currentMillis;
        // Your sampling code here

        // Read accelerometer and gyroscope data
        QMI8658_read_xyz_raw(acc, gyro, &timestamp);
        // Store the latest sample
        sensorData[sampleCount][0] = acc[0];
        sensorData[sampleCount][1] = acc[1];
        sensorData[sampleCount][2] = acc[2];
        sensorData[sampleCount][3] = gyro[0];
        sensorData[sampleCount][4] = gyro[1];
        sensorData[sampleCount][5] = gyro[2];
        sensorData[sampleCount][6] = (timestamp >> 16) & 0xFFFF;
        sensorData[sampleCount][7] = timestamp & 0xFFFF;

        sampleCount++;
    
      if (sampleCount >= SAMPLES_PER_PACKAGE) {


        // print data package
       // for (int i = 0; i < SAMPLES_PER_PACKAGE; i++) {
       //   Serial.print(sensorData[i][0]);
       //   Serial.print("\t");
       //   Serial.print(sensorData[i][1]);
       //   Serial.print("\t");
       //   Serial.print(sensorData[i][2]);
       //   Serial.print("\t");
       //   Serial.print(sensorData[i][3]);
       //   Serial.print("\t");
       //   Serial.print(sensorData[i][4]);
       //   Serial.print("\t");
       //   Serial.print(sensorData[i][5]);
       //   Serial.print("\t");
       //   Serial.println(sensorData[i][6] << 16 | sensorData[i][7]);
       // }

        sampleCount = 0; // Reset the sample counter
        if (deviceConnected) {       
          
          // Prepare the byte array to send (SAMPLES_PER_PACKAGE samples * 6 shorts + 6 timestamps)
          uint8_t sendData[SAMPLES_PER_PACKAGE * (6 * 2 + 3)]; // Each sample has 6 16-bit (2-byte) values + 3 bytes for the timestamp
          
          int index = 0;
          for (int i = 0; i < SAMPLES_PER_PACKAGE; i++) {
              // Copy accelerometer and gyroscope data
              for (int j = 0; j < 6; j++) {
                  sendData[index++] = (sensorData[i][j] >> 8) & 0xFF; // High byte
                  sendData[index++] = sensorData[i][j] & 0xFF;        // Low byte
              }

              // Copy timestamp (24 bits)
            sendData[index++] = sensorData[i][6] & 0xFF; // High byte
            sendData[index++] = (sensorData[i][7] >> 8) & 0xFF;      // Middle byte
            sendData[index++] = (sensorData[i][7]) & 0xFF;      // Low byte
          }

          // Send the combined data
          pSensorCharacteristic->setValue(sendData, sizeof(sendData));
          pSensorCharacteristic->notify();  // Notify the client
        }
      }
    }
}
